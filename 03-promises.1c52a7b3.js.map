{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAgDsE,SAA7DC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAzDMQ,SAASC,cAAc,SAE/BC,iBAAiB,UAOkC,SAAlCC,GACpBA,EAAEC,iBAc6C,IAXY,IAExCC,EAAfF,EAAEG,cADJC,SAAYC,EAAMH,EAANG,OAAQC,EAAKJ,EAALb,MAAOkB,EAAIL,EAAJK,KAMzBC,EAAeC,OAAOH,EAAMI,OAIvBC,EAAI,EAAGA,GAAKN,EAAOK,MAAOC,GAAK,EACtCxB,EAAcwB,EAAGH,GACdI,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGjD6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAIJmB,GAA/BC,OAAOF,EAAKG,OAGlBV,EAAVoB,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\n\n// Функція, яка на момент сабміту форми\n// викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передаємо їй номер промісу(position), що створюється,\n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  //відслідковуємо подію, тому можемо отримати доступ до інпутів через їх name\n  const {\n    elements: { amount, delay, step },\n  } = e.currentTarget;\n\n  //поточна затримка, буде різною на кожній ітерації\n  //приводимо до числа\n\n  let currentDelay = Number(delay.value);\n\n  //створюємо цикл для створення кожного окремого проміса\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    //додаємо до поточної затримки крок збільшення затримки\n    currentDelay += Number(step.value);\n  }\n  //чистимо форму\n  e.target.reset();\n}\n\n// Функція createPromise поверталє один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу є об'єкт з властивостями position і delay зі значеннями однойменних параметрів.\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    //setTimeout для першої затримки delay\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","amount","delay1","step","currentDelay","Number","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","target","reset"],"version":3,"file":"03-promises.1c52a7b3.js.map"}