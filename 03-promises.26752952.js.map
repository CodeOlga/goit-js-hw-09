{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAgDsE,SAA7DC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAzDAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAOkC,SAAlCC,GACpBA,EAAEC,iBAGyD,MACzDC,UAAUC,OAAEA,EAAQd,MAAAe,EAAKC,KAAEA,IACzBL,EAAEM,cAKU,IAAZC,EAAeC,OAAOJ,EAAMK,OAIe,IAA1C,IAAIC,EAAI,EAAGA,GAAKP,EAAOM,MAAOC,GAAK,EACtCvB,EAAcuB,EAAGH,GACdI,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoB5B,QAAiBC,MAAU,IAINkB,GAA/BC,OAAOH,EAAKI,OAGlBT,EAAViB,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onFormSubmit);\n\n// Функція, яка на момент сабміту форми\n// викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передаємо їй номер промісу(position), що створюється,\n// і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  //відслідковуємо подію, тому можемо отримати доступ до інпутів через їх name\n  const {\n    elements: { amount, delay, step },\n  } = e.currentTarget;\n\n  //поточна затримка, буде різною на кожній ітерації\n  //приводимо до числа\n\n  let currentDelay = Number(delay.value);\n\n  //створюємо цикл для створення кожного окремого проміса\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    //додаємо до поточної затримки крок збільшення затримки\n    currentDelay += Number(step.value);\n  }\n  //чистимо форму\n  e.target.reset();\n}\n\n// Функція createPromise поверталє один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу є об'єкт з властивостями position і delay зі значеннями однойменних параметрів.\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    //setTimeout для першої затримки delay\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","elements","amount","delay1","step","currentTarget","currentDelay","Number","value","i","then","$parcel$interopDefault","Notify","success","catch","failure","target","reset"],"version":3,"file":"03-promises.26752952.js.map"}