{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAmDA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAIpBG,EAAO,CAAEJ,WAAUC,S,GAGpBA,E,IA9DMQ,SAASC,cAAc,SAM/BC,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAEC,iBAUF,IAJA,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAMH,EAANG,OAAQC,EAAKJ,EAALb,MAAOkB,EAAIL,EAAJK,KAGpBC,EAAI,EAAGA,GAAKH,EAAOI,MAAOD,GAAK,EAAG,CAEzC,IAAIE,EAAaC,SAASL,EAAMG,OAASE,SAASJ,EAAKE,OAEvDC,GAAcC,SAASJ,EAAKE,OAE5BtB,EAAcqB,EAAGE,GACdE,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjByB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAGjD6B,OAAM,SAAAL,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClByB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAuCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n// const firstDelay = document.querySelector('input[name=\"delay\"]');\n// const delayStep = document.querySelector('input[name=\"step\"]');\n// const amount = document.querySelector('input[name=\"amount\"]');\n// const submitBtn = document.querySelector('button[type=\"submit\"]');\n\nform.addEventListener('submit', onFormSubmit);\n// submitBtn.addEventListener('submit', createPromise);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  // const delay = e.currentTarget.delay;\n  // const step = e.currentTarget.step;\n  // const amount = e.currentTarget.amount;\n\n  const {\n    elements: { amount, delay, step },\n  } = e.currentTarget;\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    // step + 1;\n    let totalDelay = parseInt(delay.value) + parseInt(step.value);\n    // const totalDelay = parseInt(delay.value) + parseInt(step.value);\n    totalDelay += parseInt(step.value);\n    // console.log(totalDelay);\n    createPromise(i, totalDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  // console.log(e);\n  // console.log(totalDelay);\n  // console.log(delay);\n  // console.log(e.currentTarget.step);\n  // console.log(e.currentTarget.amount);\n\n  // return;\n}\n\n// const createPromise = (position, delay) => {\n// const promise = function createPromise (position, delay) {\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // resolve(onFormSubmit);\n        resolve({ position, delay });\n        // resolve({ firstDelay, delayStep, amount });\n        // resolve('Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)');\n      } else {\n        reject({ position, delay });\n        // reject('Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)');\n      }\n    }, delay);\n  });\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","amount","delay1","step","i","value","totalDelay","parseInt","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.bb6f5016.js.map"}